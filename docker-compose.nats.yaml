version: '3.8'

services:
  # üêò PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ads-postgres
    environment:
      POSTGRES_DB: adsmetrics
      POSTGRES_USER: adsuser
      POSTGRES_PASSWORD: adspassword
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adsuser -d adsmetrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # üöÄ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ads-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # üì° NATS Message Broker with JetStream & HTTP Monitoring
  nats:
    image: nats:2.10-alpine
    container_name: ads-nats
    command: 
      - "--jetstream"
      - "--http_port=8222"
      - "--port=4222"
      - "--cluster_name=ads-cluster"
      - "--store_dir=/data/jetstream"
    ports:
      - "4222:4222"  # NATS client connections
      - "6222:6222"  # NATS clustering
      - "8222:8222"  # Monitoring dashboard
    volumes:
      - nats-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # üîß Ads Metric Tracker Application
  ads-tracker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ads-tracker
    environment:
      HTTP_HOST: 0.0.0.0
      HTTP_PORT: 8080
      LOG_FILE: logs/app.log
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: adsuser
      POSTGRES_PASSWORD: adspassword
      POSTGRES_DB: adsmetrics
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      NATS_URL: nats://nats:4222
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä Prometheus for metrics scraping
  prometheus:
    image: prom/prometheus:latest
    container_name: ads-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    depends_on:
      ads-tracker:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìà Grafana for dashboard visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ads-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_SECURITY_ALLOW_EMBEDDING: true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - app-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üõ†Ô∏è NATS CLI Tools for testing/inspecting JetStream (optional)
  nats-box:
    image: natsio/nats-box:latest
    container_name: nats-box
    depends_on:
      - nats
    networks:
      - app-network
    command: sleep infinity
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  nats-data:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge
